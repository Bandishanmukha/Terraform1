##List of resoure are
## 1. Provide 2. ec2 3.key 4.key 5.Default_vpc 6.security_groups 7. dataaws_subnets 8.aws_target_group 9.aws_lb 10.aws_lb_listener 11.aws alb_tragetGroup attachment
## use file $ count for list

provider "aws" {
  region = "ap-south-1"
}

#This is a single-line comment
resource "aws_instance" "test" {
  ami                    = "ami-0a23ccb2cdd9286bb"
  instance_type          = "t2.micro"
  count                  = 2
  key_name               = "${aws_key_pair.terraform-key.key_name}"
  vpc_security_group_ids = [aws_security_group.allow_tls.id]
  user_data              = "${file("install_httpd.sh")}"
  tags = {
    Name = "TESTVM${count.index}"
  }
}


resource "aws_key_pair" "terraform-key" {
  key_name   = "terraform-key"
  public_key = "${file("terraform-key.pub")}"
}
resource "aws_eip" "myeip" {
  count    = length(aws_instance.test)
  vpc      = true
  instance = "${element(aws_instance.test.*.id, count.index)}"
  tags = {
    Name = "eip-TESTVM${count.index}"
  }

}

resource "aws_default_vpc" "default" {
  tags = {
    Name = "Default VPC"
  }
}

resource "aws_security_group" "allow_tls" {
  name        = "allow_tls"
  description = "Allow TLS inbound traffic"
  vpc_id      = "${aws_default_vpc.default.id}"
  ingress {
    description = "TLS from VPC"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "TLS from VPC"
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = [aws_default_vpc.default.cidr_block]
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }


  tags = {
    Name = "allow_tls"
  }
}

data "aws_subnet_ids" "subnet" {
  vpc_id = "${aws_default_vpc.default.id}"
}

resource "aws_lb_target_group" "my-target-group" {
  health_check {
    interval            = 10
    path                = "/"
    protocol            = "HTTP"
    timeout             = 5
    healthy_threshold   = 5
    unhealthy_threshold = 2
  }
  name        = "my-test-tg"
  port        = 80
  protocol    = "HTTP"
  target_type = "instance"
  vpc_id      = "${aws_default_vpc.default.id}"
}


resource "aws_lb" "my-aws-alb" {
  name            = "test-alb"
  internal        = false
  security_groups = ["${aws_security_group.allow_tls.id}"]
  subnets         = data.aws_subnet_ids.subnet.ids
  tags = {
    Name = "test-alb"
  }

  ip_address_type    = "ipv4"
  load_balancer_type = "application"
}

resource "aws_lb_listener" "alb-listner" {
  load_balancer_arn = aws_lb.my-aws-alb.arn
  port              = 80
  protocol          = "HTTP"
  default_action {
    target_group_arn = "${aws_lb_target_group.my-target-group.arn}"
    type             = "forward"
  }
}

resource "aws_alb_target_group_attachment" "ec2_attach" {
  count            = length(aws_instance.test)
  target_group_arn = aws_lb_target_group.my-target-group.arn
  target_id        = aws_instance.test[count.index].id
}
